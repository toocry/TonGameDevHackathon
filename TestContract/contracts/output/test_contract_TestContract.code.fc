#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "test_contract_TestContract.headers.fc";
#include "test_contract_TestContract.stdlib.fc";
#include "test_contract_TestContract.storage.fc";

;;
;; Contract TestContract functions
;;

(slice, cell, slice, int) $TestContract$_contract_init() impure inline_ref {
    var (($self'owner, $self'leaderboard, $self'player, $self'score)) = (null(), null(), null(), 0);
    $self'owner = __tact_context_get_sender();
    $self'player = __tact_create_address(0, 0);
    $self'leaderboard~__tact_dict_set_slice_int(267, $self'owner, $self'score, 257);
    return ($self'owner, $self'leaderboard, $self'player, $self'score);
}

((slice, cell, slice, int), int) $TestContract$_fun_playerScore((slice, cell, slice, int) $self, slice $playerAddress) impure inline_ref {
    var (($self'owner, $self'leaderboard, $self'player, $self'score)) = $self;
    return (($self'owner, $self'leaderboard, $self'player, $self'score), __tact_dict_get_slice_int($self'leaderboard, 267, $playerAddress, 257));
}

((slice, cell, slice, int), slice) $TestContract$_fun_owner((slice, cell, slice, int) $self) impure inline_ref {
    var (($self'owner, $self'leaderboard, $self'player, $self'score)) = $self;
    return (($self'owner, $self'leaderboard, $self'player, $self'score), $self'owner);
}

((slice, cell, slice, int), int) $TestContract$_fun_score((slice, cell, slice, int) $self) impure inline_ref {
    var (($self'owner, $self'leaderboard, $self'player, $self'score)) = $self;
    return (($self'owner, $self'leaderboard, $self'player, $self'score), $self'score);
}

;;
;; Receivers of a Contract TestContract
;;

(((slice, cell, slice, int)), ()) $TestContract$_internal_binary_NewPlayerScore((slice, cell, slice, int) $self, (slice, int) $msg) impure inline {
    var ($self'owner, $self'leaderboard, $self'player, $self'score) = $self;
    var ($msg'playerAddress, $msg'score) = $msg;
    $self'leaderboard~__tact_dict_set_slice_int(267, $msg'playerAddress, $msg'score, 257);
    return (($self'owner, $self'leaderboard, $self'player, $self'score), ());
}

((slice, cell, slice, int), ()) $TestContract$_internal_text_c4f8d72312edfdef5b7bec7833bdbb162d1511bd78a912aed0f2637af65572ae((slice, cell, slice, int) $self) impure inline {
    var ($self'owner, $self'leaderboard, $self'player, $self'score) = $self;
    $self'score = ($self'score + 1);
    $self'leaderboard~__tact_dict_set_slice_int(267, $self'owner, $self'score, 257);
    return (($self'owner, $self'leaderboard, $self'player, $self'score), ());
}

(((slice, cell, slice, int)), ()) $TestContract$_internal_binary_Deploy((slice, cell, slice, int) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'leaderboard, $self'player, $self'score) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'leaderboard, $self'player, $self'score)~$TestContract$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'leaderboard, $self'player, $self'score), ());
}

;;
;; Get methods of a Contract TestContract
;;

_ %playerScore(slice $$playerAddress) method_id(79125) {
    slice $playerAddress = __tact_verify_address($$playerAddress);
    var self = $TestContract$_contract_load();
    var res = self~$TestContract$_fun_playerScore($playerAddress);
    return res;
}

_ %owner() method_id(83229) {
    var self = $TestContract$_contract_load();
    var res = self~$TestContract$_fun_owner();
    return res;
}

_ %score() method_id(119864) {
    var self = $TestContract$_contract_load();
    var res = self~$TestContract$_fun_score();
    return res;
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmRhf5yK1JvgPTWYjD5WZk4QAKjjMbKYFtqQXShRzhoTNx";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract TestContract
;;

((slice, cell, slice, int), int) $TestContract$_contract_router_internal((slice, cell, slice, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive NewPlayerScore message
    if (op == 2184161019) {
        var msg = in_msg~$NewPlayerScore$_load();
        self~$TestContract$_internal_binary_NewPlayerScore(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$TestContract$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "increment" message
        if (text_op == 0xc4f8d72312edfdef5b7bec7833bdbb162d1511bd78a912aed0f2637af65572ae) {
            self~$TestContract$_internal_text_c4f8d72312edfdef5b7bec7833bdbb162d1511bd78a912aed0f2637af65572ae();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $TestContract$_contract_load();
    
    ;; Handle operation
    int handled = self~$TestContract$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $TestContract$_contract_store(self);
}
